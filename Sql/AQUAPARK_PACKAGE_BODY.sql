create or replace PACKAGE BODY AQUAPARK_PACKAGE
AS

-- Exist aquapark ID
  FUNCTION EXIST_AQUAPARK(
      PID INTEGER)
    RETURN BOOLEAN AS
  POCET NUMBER DEFAULT 0;
  BEGIN
    SELECT 
      COUNT(*) INTO POCET 
    FROM 
      AQUAPARK
    WHERE 
      AQUAPARK.ID_AQUAPARK = PID;
    
    IF (POCET = 0) THEN
      RETURN FALSE;
    END IF;
    
    RETURN TRUE;
  END EXIST_AQUAPARK;

-- Exist aquapark nazov
  FUNCTION EXIST_AQUAPARK_NAZOV(
      PNAZOV VARCHAR2)
    RETURN BOOLEAN AS
  POCET NUMBER DEFAULT 0;
  BEGIN
    SELECT 
      COUNT(*) INTO POCET 
    FROM 
      AQUAPARK
    WHERE 
      AQUAPARK.NAZOV = PNAZOV;
    
    IF (POCET = 0) THEN
      RETURN FALSE;
    END IF;
    
    RETURN TRUE;
  END EXIST_AQUAPARK_NAZOV;

-- Create aquapark
  FUNCTION CREATE_AQUAPARK(
      PNAZOV        VARCHAR2,
      PPREVADZKA_OD INTEGER,
      PPREVADZKA_DO INTEGER,
      PULICA        VARCHAR2,
      PCISLO        INTEGER,
      POBEC         CHAR)
    RETURN INTEGER AS
    EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_AQUAPARK_NAZOV(PNAZOV);
    
    IF (EXIST) THEN
      RETURN 0;
    END IF;
    
    INSERT INTO ADRESA (ULICA, CISLO, ID_OBEC)
    VALUES (PULICA, PCISLO, POBEC);
    
    INSERT INTO AQUAPARK (PREVADZKA_OD, PREVADZKA_DO, NAZOV, ID_ADRESA)
    VALUES(PPREVADZKA_OD, PPREVADZKA_DO, PNAZOV, ADRESA_SEQUENCE.CURRVAL);
    
    RETURN 1;
  END CREATE_AQUAPARK;

-- Delete aquapark
  FUNCTION DELETE_AQUAPARK(
      PID INTEGER)
    RETURN INTEGER AS
    TYPE T_ATRAKCIA 
    IS TABLE OF ATRAKCIA.ID_ATRAKCIA%TYPE
       INDEX BY PLS_INTEGER;
    TOBOGANY T_ATRAKCIA;
    BAZENY T_ATRAKCIA;
    
    TYPE T_CENNIK
    IS TABLE OF CENNIK_AQUAPARK_VSTUP%ROWTYPE;
    CENNIK T_CENNIK;
    
    EXIST BOOLEAN;
    POM INTEGER := 0;
    PARK AQUAPARK%ROWTYPE;
  BEGIN
    EXIST := EXIST_AQUAPARK(PID);
    
    IF (EXIST) THEN
      SELECT 
        * INTO PARK
      FROM 
        AQUAPARK
      WHERE ID_AQUAPARK = PID;
      
      -- delete cennik vstupov
      SELECT
        * BULK COLLECT INTO CENNIK
      FROM CENNIK_AQUAPARK_VSTUP
      WHERE ID_AQUAPARK = PID;
      
      FOR INDX IN 1 .. CENNIK.COUNT 
      LOOP
        POM := REMOVE_CENA(PID, CENNIK(INDX).SKUPINA, CENNIK(INDX).PLATNA_OD);
      END LOOP;
      
      -- delete majitelia
      DELETE MAJITEL_AQUAPARK
      WHERE ID_AQUAPARK = PID;
      
      -- delete navstevnost
      DELETE AQUAPARK_NAVSTEVNIK
      WHERE ID_AQUAPARK = PID;
      
      -- delete tobogany
      SELECT 
        ID_TOBOGAN BULK COLLECT INTO TOBOGANY 
      FROM ATRAKCIA JOIN TOBOGAN ON (ATRAKCIA.ID_ATRAKCIA = TOBOGAN.ID_TOBOGAN)
      WHERE ID_AQUAPARK = PID;
      
      FOR INDX IN 1 .. TOBOGANY.COUNT 
      LOOP
        POM := DELETE_TOBOGAN(PID, TOBOGANY(INDX));
      END LOOP;
      
      -- delete bazeny
      SELECT 
        ID_BAZEN BULK COLLECT INTO BAZENY 
      FROM ATRAKCIA JOIN BAZEN ON (ATRAKCIA.ID_ATRAKCIA = BAZEN.ID_BAZEN)
      WHERE ID_AQUAPARK = PID;
      
      FOR INDX IN 1 .. BAZENY.COUNT 
      LOOP
        POM := DELETE_BAZEN(PID, BAZENY(INDX));
      END LOOP;
      
      -- delete aquapark
      DELETE AQUAPARK
      WHERE ID_AQUAPARK = PID;
      
      -- delete adresa
      DELETE ADRESA WHERE ID_ADRESA = PARK.ID_ADRESA;
      
      RETURN 1;
    END IF;
    RETURN 0;
  END DELETE_AQUAPARK;

-- update aquapark
  FUNCTION UPDATE_AQUAPARK(
      PID           INTEGER,
      PNAZOV        VARCHAR2,
      PPREVADZKA_OD INTEGER,
      PPREVADZKA_DO INTEGER,
      PULICA        VARCHAR2,
      PCISLO        INTEGER,
      POBEC         CHAR)
    RETURN INTEGER AS
    EXIST BOOLEAN;
    PARK AQUAPARK%ROWTYPE;
  BEGIN
    EXIST := EXIST_AQUAPARK(PID);
    
    IF (EXIST) THEN
      SELECT 
        * INTO PARK
      FROM 
        AQUAPARK
      WHERE ID_AQUAPARK = PID;
      
      -- update adresa
      UPDATE 
        ADRESA
      SET 
        ULICA = PULICA, 
        CISLO = PCISLO, 
        ID_OBEC = POBEC
      WHERE 
        ID_ADRESA = PARK.ID_ADRESA;
      
      -- update aquapark
      UPDATE
        AQUAPARK
      SET
        NAZOV = PNAZOV,
        PREVADZKA_OD = PPREVADZKA_OD,
        PREVADZKA_DO = PPREVADZKA_DO
      WHERE
        ID_AQUAPARK = PID;
      
    END IF;
    
    RETURN 0;
  END UPDATE_AQUAPARK;

-- add new cena
  FUNCTION ADD_CENA(
      AQUAPARK INTEGER,
      PSKUPINA VARCHAR2,
      PSUMA FLOAT)
    RETURN INTEGER AS
    POCET INTEGER := 0;
    DATUM DATE;
  BEGIN
    SELECT COUNT(*) INTO POCET
    FROM CENNIK_AQUAPARK_VSTUP
    WHERE ID_AQUAPARK = AQUAPARK
      AND SKUPINA = PSKUPINA;
      
    IF (POCET > 0) THEN
      SELECT PLATNA_OD INTO DATUM
      FROM CENNIK_AQUAPARK_VSTUP
      WHERE ID_AQUAPARK = AQUAPARK
        AND SKUPINA = PSKUPINA AND PLATNA_DO IS NULL;

      IF (DATUM < CURRENT_DATE) THEN
        UPDATE 
          CENNIK_AQUAPARK_VSTUP
        SET
          PLATNA_DO = CURRENT_DATE
        WHERE ID_AQUAPARK = AQUAPARK
          AND SKUPINA = PSKUPINA
          AND PLATNA_DO IS NULL;
      ELSE
        DELETE 
          CENNIK_AQUAPARK_VSTUP
        WHERE ID_AQUAPARK = AQUAPARK
          AND SKUPINA = PSKUPINA
          AND PLATNA_DO IS NULL;
      END IF;
      
      INSERT INTO CENNIK_AQUAPARK_VSTUP
      VALUES (PSKUPINA, CURRENT_DATE, AQUAPARK, NULL, PSUMA);
    END IF;    
  RETURN 1;
  END ADD_CENA;

-- remove cena
  FUNCTION REMOVE_CENA(
      AQUAPARK   INTEGER,
      PSKUPINA   VARCHAR2,
      PPLATNA_OD DATE)
    RETURN INTEGER AS
  POCET INTEGER := 0;
  BEGIN
    SELECT COUNT(*) INTO POCET
    FROM CENNIK_AQUAPARK_VSTUP
    WHERE ID_AQUAPARK = AQUAPARK
      AND SKUPINA = PSKUPINA;
      
    IF (POCET > 0) THEN
      DELETE 
        CENNIK_AQUAPARK_VSTUP
      WHERE ID_AQUAPARK = AQUAPARK
        AND PLATNA_OD = PPLATNA_OD
        AND SKUPINA = PSKUPINA;
    END IF;
    
  RETURN 1;
  END REMOVE_CENA;

-- test if exists majitel
  FUNCTION EXIST_MAJITEL(
      PROD_CISLO VARCHAR2)
    RETURN BOOLEAN AS
  POCET NUMBER DEFAULT 0;
  BEGIN
    SELECT COUNT(*) INTO POCET 
    FROM MAJITEL
    WHERE MAJITEL.ROD_CISLO = PROD_CISLO;
    
    IF (POCET = 0) THEN
      RETURN FALSE;
    END IF;
    
    RETURN TRUE;
  END EXIST_MAJITEL;

-- test if majitel has aquapark
  FUNCTION EXIST_MAJITEL_AQUAPARK(
      AQUAPARK   INTEGER,
      PROD_CISLO VARCHAR2)
    RETURN BOOLEAN AS
  POCET NUMBER DEFAULT 0;
  BEGIN
    SELECT COUNT(*) INTO POCET 
    FROM MAJITEL_AQUAPARK
    WHERE MAJITEL_AQUAPARK.ID_AQUAPARK = AQUAPARK
      AND MAJITEL_AQUAPARK.ROD_CISLO = PROD_CISLO
      AND MAJITEL_AQUAPARK.DATUM_DO IS NULL;
    
    IF (POCET = 0) THEN
      RETURN FALSE;
    END IF;
    
    RETURN TRUE;
  END EXIST_MAJITEL_AQUAPARK;

-- add majitel to aquapark
  FUNCTION ADD_MAJITEL(
      AQUAPARK    INTEGER,
      PROD_CISLO  VARCHAR2,
      PMENO       VARCHAR2,
      PPRIEZVISKO VARCHAR2)
    RETURN INTEGER AS
    EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_MAJITEL_AQUAPARK(AQUAPARK, PROD_CISLO);
    IF (EXIST) THEN
      RETURN 0;
    END IF;
    
    EXIST := EXIST_MAJITEL(PROD_CISLO);
    IF (EXIST = FALSE) THEN
      -- insert majitel
      INSERT INTO MAJITEL
      VALUES (PROD_CISLO, PMENO, PPRIEZVISKO);
    END IF;
    
    -- insert majitel_aquapark
    INSERT INTO MAJITEL_AQUAPARK
    VALUES (PROD_CISLO, AQUAPARK, CURRENT_DATE, NULL);
    
    RETURN 1;
  END ADD_MAJITEL;

-- remove majitel from aquapark
  FUNCTION REMOVE_MAJITEL(
      AQUAPARK   INTEGER,
      PROD_CISLO VARCHAR2)
    RETURN INTEGER AS
  EXIST BOOLEAN := FALSE;
  DATUM DATE;
  BEGIN
    EXIST := EXIST_MAJITEL_AQUAPARK(AQUAPARK, PROD_CISLO);
    IF (EXIST = FALSE) THEN
      RETURN 0;
    END IF;
    
    SELECT DATUM_OD INTO DATUM FROM MAJITEL_AQUAPARK 
    WHERE ROD_CISLO = PROD_CISLO AND ID_AQUAPARK = AQUAPARK AND DATUM_DO IS NULL;
    
    IF (DATUM < CURRENT_DATE) THEN
      UPDATE 
        MAJITEL_AQUAPARK
      SET
        DATUM_DO = CURRENT_DATE
      WHERE
        ROD_CISLO = PROD_CISLO
        AND ID_AQUAPARK = AQUAPARK;
    ELSE
      DELETE 
        MAJITEL_AQUAPARK
      WHERE
        ROD_CISLO = PROD_CISLO
        AND ID_AQUAPARK = AQUAPARK;
    END IF;
    
    RETURN 1;
  END REMOVE_MAJITEL;

-- test if exists atrakcia
  FUNCTION EXIST_ATRAKCIA(
      AQUAPARK INTEGER,
      ATRAKCIA INTEGER)
    RETURN BOOLEAN AS
  POCET NUMBER DEFAULT 0;
  BEGIN
    SELECT COUNT(*) INTO POCET 
    FROM ATRAKCIA
    WHERE ATRAKCIA.ID_AQUAPARK = AQUAPARK
      AND ATRAKCIA.ID_ATRAKCIA = ATRAKCIA;
    
    IF (POCET = 0) THEN
      RETURN FALSE;
    END IF;
    
    RETURN TRUE;
  END EXIST_ATRAKCIA;

-- create atrakcia
  FUNCTION ADD_ATRAKCIA(
      AQUAPARK      INTEGER,
      PNAZOV        VARCHAR2,
      PVNUTORNA     NUMBER,
      PPREVADZKA_OD INTEGER,
      PPREVADZKA_DO INTEGER,
      PPOPIS        VARCHAR2,
      PSUMA FLOAT)
    RETURN INTEGER AS
    EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_AQUAPARK(AQUAPARK);
    
    IF (EXIST) THEN
      INSERT INTO ATRAKCIA (NAZOV, VNUTORNA, PREVADZKA_OD, PREVADZKA_DO, POPIS, ID_AQUAPARK)
      VALUES (PNAZOV, PVNUTORNA, PPREVADZKA_OD, PPREVADZKA_DO, PPOPIS, AQUAPARK);
      
      INSERT INTO CENNIK_ATRAKCIA
      VALUES (CURRENT_DATE, ATRAKCIA_SEQUENCE.CURRVAL, NULL, PSUMA);
      
      RETURN ATRAKCIA_SEQUENCE.CURRVAL;
    END IF;
    
    RETURN 0;
  END ADD_ATRAKCIA;

-- update atrakcia
  FUNCTION UPDATE_ATRAKCIA(
      AQUAPARK      INTEGER,
      ATRAKCIA      INTEGER,
      PNAZOV        VARCHAR2,
      PVNUTORNA     NUMBER,
      PPREVADZKA_OD INTEGER,
      PPREVADZKA_DO INTEGER,
      PPOPIS        VARCHAR2,
      PSUMA FLOAT)
    RETURN INTEGER AS
    EXIST BOOLEAN := FALSE;
    CENA FLOAT := 0;
    DATUM DATE;
  BEGIN
    EXIST := EXIST_ATRAKCIA(AQUAPARK, ATRAKCIA);
    
    IF (EXIST) THEN
      UPDATE ATRAKCIA
      SET
        NAZOV = PNAZOV, 
        VNUTORNA = PVNUTORNA, 
        PREVADZKA_OD = PPREVADZKA_OD, 
        PREVADZKA_DO = PPREVADZKA_DO, 
        POPIS = PPOPIS
      WHERE
        ID_ATRAKCIA = ATRAKCIA
        AND ID_AQUAPARK = AQUAPARK;
      
      SELECT SUMA INTO CENA FROM CENNIK_ATRAKCIA
      WHERE ID_ATRAKCIA = ATRAKCIA AND PLATNA_DO IS NULL;
      
      IF (CENA <> PSUMA) THEN
        SELECT PLATNA_OD INTO DATUM
        FROM CENNIK_ATRAKCIA
        WHERE ID_ATRAKCIA = ATRAKCIA
          AND PLATNA_DO IS NULL;
  
        IF (DATUM < CURRENT_DATE) THEN
          UPDATE 
            CENNIK_ATRAKCIA
          SET
            PLATNA_DO = CURRENT_DATE
          WHERE ID_ATRAKCIA = ATRAKCIA
            AND PLATNA_DO IS NULL;
        ELSE
          DELETE CENNIK_ATRAKCIA
          WHERE
            ID_ATRAKCIA = ATRAKCIA AND PLATNA_DO IS NULL;
        END IF;
            
        INSERT INTO CENNIK_ATRAKCIA
        VALUES (CURRENT_DATE, ATRAKCIA, NULL, PSUMA);
        
        RETURN 1;
      END IF;      
      RETURN 0;
    END IF;
    
    RETURN 0;
  END UPDATE_ATRAKCIA;

-- delete atrakcia
  FUNCTION DELETE_ATRAKCIA(
      AQUAPARK INTEGER,
      ATRAKCIA INTEGER)
    RETURN INTEGER AS
  EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_ATRAKCIA(AQUAPARK, ATRAKCIA);
    
    IF (EXIST) THEN
      DELETE FROM CENNIK_ATRAKCIA
      WHERE ID_ATRAKCIA = ATRAKCIA;
      
      DELETE FROM NAVSTEVNIK_ATRAKCIA
      WHERE ID_ATRAKCIA = ATRAKCIA;
      
      DELETE FROM ATRAKCIA
      WHERE ID_ATRAKCIA = ATRAKCIA;
    END IF;
    
    RETURN 0;
  END DELETE_ATRAKCIA;

-- test if exists tobogan
  FUNCTION EXIST_TOBOGAN(
      AQUAPARK INTEGER,
      TOBOGAN  INTEGER)
    RETURN BOOLEAN AS
  POCET NUMBER DEFAULT 0;
  BEGIN
    SELECT COUNT(*) INTO POCET 
    FROM TOBOGAN JOIN ATRAKCIA ON (TOBOGAN.ID_TOBOGAN = ATRAKCIA.ID_ATRAKCIA)
    WHERE ID_AQUAPARK = AQUAPARK
      AND ID_ATRAKCIA = TOBOGAN;
    
    IF (POCET = 0) THEN
      RETURN FALSE;
    END IF;
    
    RETURN TRUE;
  END EXIST_TOBOGAN;

-- create tobogan
  FUNCTION CREATE_TOBOGAN(
      AQUAPARK      INTEGER,
      PNAZOV        VARCHAR2,
      PVNUTORNA     NUMBER,
      PPREVADZKA_OD INTEGER,
      PPREVADZKA_DO INTEGER,
      PPOPIS        VARCHAR2,
      PSUMA FLOAT,
      PDLZKA FLOAT,
      POBTIAZNOST  INTEGER,
      PNAFUKOVACKA NUMBER,
      POTVORENY    NUMBER,
      PFARBA       VARCHAR2)
    RETURN INTEGER AS
    ATRAKCIA INTEGER := 0;
  BEGIN
    ATRAKCIA := ADD_ATRAKCIA(AQUAPARK, PNAZOV, PVNUTORNA, PPREVADZKA_OD, PPREVADZKA_DO, PPOPIS, PSUMA);
    
    IF (ATRAKCIA <> 0) THEN
      INSERT INTO TOBOGAN 
        (ID_TOBOGAN, DLZKA, OBTIAZNOST, NAFUKOVACKA, OTVORENY, FARBA)
      VALUES 
        (ATRAKCIA, PDLZKA, POBTIAZNOST, PNAFUKOVACKA, POTVORENY, PFARBA);
      
      RETURN 1;
    END IF;
    
    RETURN 0;
  END CREATE_TOBOGAN;

-- update tobogan
  FUNCTION UPDATE_TOBOGAN(
      AQUAPARK      INTEGER,
      TOBOGAN       INTEGER,
      PNAZOV        VARCHAR2,
      PVNUTORNA     NUMBER,
      PPREVADZKA_OD INTEGER,
      PPREVADZKA_DO INTEGER,
      PPOPIS        VARCHAR2,
      PSUMA FLOAT,
      PDLZKA FLOAT,
      POBTIAZNOST  INTEGER,
      PNAFUKOVACKA NUMBER,
      POTVORENY    NUMBER,
      PFARBA       VARCHAR2)
    RETURN INTEGER AS
  EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_TOBOGAN(AQUAPARK, TOBOGAN);
    
    IF (EXIST) THEN
      UPDATE TOBOGAN
      SET
        DLZKA = PDLZKA,
        OBTIAZNOST = POBTIAZNOST,
        NAFUKOVACKA = PNAFUKOVACKA,
        OTVORENY = POTVORENY,
        FARBA = PFARBA
      WHERE
        ID_TOBOGAN = TOBOGAN;
      
      RETURN UPDATE_ATRAKCIA(AQUAPARK, TOBOGAN, PNAZOV, PVNUTORNA, PPREVADZKA_OD, PPREVADZKA_DO, PPOPIS, PSUMA);
    END IF;

    RETURN 0;
  END UPDATE_TOBOGAN;

-- delete tobogan
  FUNCTION DELETE_TOBOGAN(
      AQUAPARK INTEGER,
      TOBOGAN    INTEGER)
    RETURN NUMBER AS
  EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_TOBOGAN(AQUAPARK, TOBOGAN);
    
    IF (EXIST) THEN
      DELETE OBMEDZENIE_TOBOGANU
      WHERE ID_TOBOGAN = TOBOGAN;
      
      DELETE MAX_RYCHLOST
      WHERE ID_TOBOGAN = TOBOGAN;
      
      RETURN DELETE_ATRAKCIA(AQUAPARK, TOBOGAN);
    END IF;

    RETURN 0;
  END DELETE_TOBOGAN;

-- test if exists obmedzenie
  FUNCTION EXIST_OBMEDZENIE(
      OBMEDZENIE VARCHAR2,
      TOBOGAN INTEGER)
    RETURN BOOLEAN AS
    POCET NUMBER DEFAULT 0;
  BEGIN
    SELECT 
      COUNT(*) INTO POCET 
    FROM 
      OBMEDZENIE_TOBOGANU
    WHERE
      ID_OBMEDZENIE = OBMEDZENIE AND ID_TOBOGAN = TOBOGAN;
    
    IF (POCET > 0) THEN
      RETURN TRUE;
    END IF;
  
    RETURN FALSE;
  END EXIST_OBMEDZENIE;

-- add obmedzenie to tobogan
  FUNCTION ADD_OBMEDZENIE(
      AQUAPARK      INTEGER,
      TOBOGAN INTEGER,
      NAZOV   VARCHAR2,
      PHODNOTA FLOAT,
      PPOPIS VARCHAR2)
    RETURN INTEGER AS
    EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_TOBOGAN(AQUAPARK, TOBOGAN);
    
    IF (EXIST) THEN
      EXIST := EXIST_OBMEDZENIE(NAZOV, TOBOGAN);
      
      IF (EXIST = FALSE) THEN
        INSERT INTO OBMEDZENIE_TOBOGANU
        VALUES (NAZOV, TOBOGAN, PHODNOTA, PPOPIS);
      
        RETURN 1;
      END IF;
    END IF;
  
    RETURN 0;
  END ADD_OBMEDZENIE;

-- remove obmedzenie from tobogan
  FUNCTION REMOVE_OBMEDZENIE(
      TOBOGAN INTEGER,
      NAZOV   VARCHAR2)
    RETURN INTEGER AS
    EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_OBMEDZENIE(NAZOV, TOBOGAN);
      
      IF (EXIST) THEN
        DELETE OBMEDZENIE_TOBOGANU
        WHERE ID_OBMEDZENIE = NAZOV AND ID_TOBOGAN = TOBOGAN;
        
        RETURN 1;
      END IF;
      
    RETURN 0;
  END REMOVE_OBMEDZENIE;

-- test if exists bazen
  FUNCTION EXIST_BAZEN(
      AQUAPARK INTEGER,
      BAZEN    INTEGER)
    RETURN BOOLEAN AS
  POCET NUMBER DEFAULT 0;
  BEGIN
    SELECT COUNT(*) INTO POCET 
    FROM BAZEN JOIN ATRAKCIA ON (BAZEN.ID_BAZEN = ATRAKCIA.ID_ATRAKCIA)
    WHERE ID_AQUAPARK = AQUAPARK
      AND ID_ATRAKCIA = BAZEN;
    
    IF (POCET = 0) THEN
      RETURN FALSE;
    END IF;
    
    RETURN TRUE;
  END EXIST_BAZEN;

-- create bazen
  FUNCTION CREATE_BAZEN(
      AQUAPARK      INTEGER,
      PNAZOV        VARCHAR2,
      PVNUTORNA     NUMBER,
      PPREVADZKA_OD INTEGER,
      PPREVADZKA_DO INTEGER,
      PPOPIS        VARCHAR2,
      PSUMA FLOAT,
      PHLBKA FLOAT,
      PTEPLOTA  INTEGER,
      PNEPLAVCI NUMBER,
      PTYP      VARCHAR2)
    RETURN INTEGER AS
  ATRAKCIA INTEGER := 0;
  BEGIN
    ATRAKCIA := ADD_ATRAKCIA(AQUAPARK, PNAZOV, PVNUTORNA, PPREVADZKA_OD, PPREVADZKA_DO, PPOPIS, PSUMA);
    
    IF (ATRAKCIA <> 0) THEN
      INSERT INTO BAZEN 
        (ID_BAZEN, HLBKA_VODY, TEPLOTA_VODY, TYP, PRE_NEPLAVCOV)
      VALUES 
        (ATRAKCIA, PHLBKA, PTEPLOTA, PTYP, PNEPLAVCI);
      
      RETURN 1;
    END IF;
    
    RETURN 0;
    RETURN NULL;
  END CREATE_BAZEN;

-- update bazen
  FUNCTION UPDATE_BAZEN(
      AQUAPARK      INTEGER,
      BAZEN         INTEGER,
      PNAZOV        VARCHAR2,
      PVNUTORNA     NUMBER,
      PPREVADZKA_OD INTEGER,
      PPREVADZKA_DO INTEGER,
      PPOPIS        VARCHAR2,
      PSUMA FLOAT,
      PHLBKA FLOAT,
      PTEPLOTA  INTEGER,
      PNEPLAVCI NUMBER,
      PTYP      VARCHAR2)
    RETURN INTEGER AS
  EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_BAZEN(AQUAPARK, BAZEN);
    
    IF (EXIST) THEN
      UPDATE BAZEN
      SET
        HLBKA_VODY = PHLBKA,
        TEPLOTA_VODY = PTEPLOTA,
        TYP = PTYP,
        PRE_NEPLAVCOV = PNEPLAVCI
      WHERE
        ID_BAZEN = BAZEN;
      
      RETURN UPDATE_ATRAKCIA(AQUAPARK, BAZEN, PNAZOV, PVNUTORNA, PPREVADZKA_OD, PPREVADZKA_DO, PPOPIS, PSUMA);
    END IF;

    RETURN 0;
  END UPDATE_BAZEN;

-- delete bazen
  FUNCTION DELETE_BAZEN(
      AQUAPARK INTEGER,
      BAZEN    INTEGER)
    RETURN INTEGER AS
    EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_BAZEN(AQUAPARK, BAZEN);
    
    IF (EXIST) THEN
      DELETE ZLOZENIE_VODY_V_BAZENE
      WHERE ID_BAZEN = BAZEN;
      
      DELETE BAZEN
      WHERE ID_BAZEN = BAZEN;
      
      RETURN DELETE_ATRAKCIA(AQUAPARK, BAZEN);
    END IF;

    RETURN 0;
  END DELETE_BAZEN;

-- test if latka exists
  FUNCTION EXIST_LATKA(
      LATKA INTEGER)
    RETURN BOOLEAN AS
    POCET NUMBER DEFAULT 0;
  BEGIN
    SELECT COUNT(*) INTO POCET 
    FROM LATKA_VODY
    WHERE LATKA_VODY.ID_LATKA = LATKA;
    
    IF (POCET = 0) THEN
      RETURN FALSE;
    END IF;
    
    RETURN TRUE;
  END EXIST_LATKA;

-- test if latka with nazov exists
  FUNCTION EXIST_LATKA_NAZOV(
      NAZOV VARCHAR2)
    RETURN BOOLEAN AS
    POCET NUMBER DEFAULT 0;
  BEGIN
    SELECT COUNT(*) INTO POCET 
    FROM LATKA_VODY
    WHERE LATKA_VODY.NAZOV = NAZOV;
    
    IF (POCET = 0) THEN
      RETURN FALSE;
    END IF;
    
    RETURN TRUE;
  END EXIST_LATKA_NAZOV;

-- create latka in DB
  FUNCTION CREATE_LATKA(
      PNAZOV VARCHAR2,
      PVPLYV VARCHAR2)
    RETURN INTEGER AS
    EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_LATKA_NAZOV(PNAZOV);
    
    IF (EXIST = FALSE) THEN
      INSERT INTO LATKA_VODY (NAZOV, VPLYV_LATKY)
      VALUES (PNAZOV, PVPLYV);
      
      RETURN 1;
    END IF;
  
    RETURN 0;
  END CREATE_LATKA;

-- udpate latka
  FUNCTION UPDATE_LATKA(
      LATKA  INTEGER,
      PNAZOV VARCHAR2,
      PVPLYV VARCHAR2)
    RETURN INTEGER AS
  EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_LATKA(LATKA);
    
    IF (EXIST) THEN
      UPDATE 
        LATKA_VODY 
      SET
        NAZOV = PNAZOV, 
        VPLYV_LATKY = PVPLYV
      WHERE
        ID_LATKA = LATKA;
      
      RETURN 1;
    END IF;
  
    RETURN 0;
  END UPDATE_LATKA;

-- delete latka from DB
  FUNCTION DELETE_LATKA(
      LATKA INTEGER)
    RETURN INTEGER AS
  EXIST BOOLEAN := FALSE;
  BEGIN
    EXIST := EXIST_LATKA(LATKA);
    
    IF (EXIST) THEN
      DELETE ZLOZENIE_VODY_V_BAZENE
      WHERE ID_LATKY = LATKA;
      
      DELETE LATKA_VODY 
      WHERE ID_LATKA = LATKA;
      
      RETURN 1;
    END IF;
  
    RETURN 0;
  END DELETE_LATKA;

-- add latka to bazen
  FUNCTION ADD_LATKA(
      BAZEN INTEGER,
      LATKA INTEGER,
      PMNOZSTVO NUMBER)
    RETURN INTEGER AS
  EXIST BOOLEAN := FALSE;
  POCET INTEGER := 0;
  BEGIN
    EXIST := EXIST_LATKA(LATKA);
    
    IF (EXIST) THEN
      SELECT COUNT(*) INTO POCET FROM BAZEN WHERE ID_BAZEN = BAZEN;
      
      IF (POCET > 0) THEN
        INSERT INTO ZLOZENIE_VODY_V_BAZENE
        VALUES (LATKA, BAZEN, PMNOZSTVO);
  
        RETURN 1;
      END IF;
    END IF;

    RETURN 0;
  END ADD_LATKA;

-- remove latka from bazen
  FUNCTION REMOVE_LATKA(
      BAZEN INTEGER,
      LATKA INTEGER)
    RETURN INTEGER AS
  POCET INTEGER := 0;
  BEGIN
    SELECT COUNT(*) INTO POCET 
    FROM ZLOZENIE_VODY_V_BAZENE 
    WHERE ID_BAZEN = BAZEN AND ID_LATKY = LATKA;
      
    IF (POCET > 0) THEN
      DELETE ZLOZENIE_VODY_V_BAZENE
      WHERE ID_BAZEN = BAZEN AND ID_LATKY = LATKA;

      RETURN 1;
    END IF;

    RETURN 0;
  END REMOVE_LATKA;

-- TODO
  PROCEDURE GENERATE_NAVSTEVNOST(
      AQUAPARK INTEGER,
      DATUM    DATE) AS
  BEGIN
    -- TODO: Implementation required for PROCEDURE AQUAPARK_PACKAGE.GENERATE_NAVSTEVNOST
    NULL;
  END GENERATE_NAVSTEVNOST;

  FUNCTION GENERATE_NAVSTEVNIK(
      AQUAPARK INTEGER)
    RETURN INTEGER AS
  BEGIN
    -- TODO: Implementation required for FUNCTION AQUAPARK_PACKAGE.GENERATE_NAVSTEVNIK
    RETURN NULL;
  END GENERATE_NAVSTEVNIK;

END AQUAPARK_PACKAGE;